name: Deploy to AKS Staging

on:
    workflow_run:
        workflows: ['CI - Test, Build & Push (testing branch)']
        types:
            - completed

jobs:
    deploy-staging:
        # only run if previous CI succeeded
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Set AKS context
              uses: azure/aks-set-context@v4
              with:
                  resource-group: ${{ secrets.RESOURCE_GROUP }}
                  cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

            - name: Create staging namespace
              run: |
                  kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
                  echo "âœ… Namespace 'staging' ready."

            - name: Deploy backend services
              run: |
                  kubectl apply -f k8s/deployment-customer.yaml -n staging
                  kubectl apply -f k8s/deployment-product.yaml -n staging
                  kubectl apply -f k8s/deployment-order.yaml -n staging
                  kubectl apply -f k8s/deployment-frontend.yaml -n staging
                  kubectl apply -f k8s/service-customer.yaml -n staging
                  kubectl apply -f k8s/service-product.yaml -n staging
                  kubectl apply -f k8s/service-order.yaml -n staging
                  kubectl apply -f k8s/service-frontend.yaml -n staging

            - name: Wait for pods to be ready
              run: |
                  kubectl wait --for=condition=ready pods --all -n staging --timeout=300s
                  echo "âœ… All pods are ready in 'staging' namespace."

            - name: Acceptance test (check services)
              run: |
                  kubectl get svc -n staging
                  echo "âœ… Staging deployment verified successfully!"

            - name: Cleanup staging environment
              if: always()
              run: |
                  kubectl delete namespace staging --ignore-not-found
                  echo "ðŸ§¹ Cleaned up temporary staging environment."
