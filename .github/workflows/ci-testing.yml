name: CI - Test, Build & Push (testing branch)

on:
    push:
        branches: [testing]

env:
    IMAGE_TAG: ${{ github.sha }}
    ACR_NAME: ${{ secrets.ACR_NAME }}
    ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 10

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install psql client (needed to create test DBs)
              run: sudo apt-get update && sudo apt-get install -y postgresql-client

            - name: Wait for Postgres to become ready
              env:
                  PGPASSWORD: postgres
              run: |
                  for i in {1..30}; do pg_isready -h localhost -p 5432 -U postgres && break || sleep 2; done

            - name: Create test DBs needed by services
              env:
                  PGPASSWORD: postgres
              run: |
                  psql -h localhost -U postgres -c "CREATE DATABASE customers;" || true
                  psql -h localhost -U postgres -c "CREATE DATABASE products;" || true
                  psql -h localhost -U postgres -c "CREATE DATABASE orders;" || true

            - name: Install pytest and run backend tests
              run: |
                  python -m pip install --upgrade pip pytest
                  set -e
                  for svc in backend/customer_service backend/product_service backend/order_service; do
                    echo "====== Testing $svc ======"
                    cd $svc
                    python -m pip install -r requirements.txt
                    pytest -q
                    cd - >/dev/null
                  done

    build-and-push:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Login to Azure (allow az CLI commands)
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Login to ACR
              run: az acr login --name ${{ env.ACR_NAME }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push customer_service image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend/customer_service
                  push: true
                  tags: ${{ env.ACR_LOGIN_SERVER }}/customer-service:${{ env.IMAGE_TAG }}

            - name: Build and push product_service image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend/product_service
                  push: true
                  tags: ${{ env.ACR_LOGIN_SERVER }}/product-service:${{ env.IMAGE_TAG }}

            - name: Build and push order_service image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend/order_service
                  push: true
                  tags: ${{ env.ACR_LOGIN_SERVER }}/order-service:${{ env.IMAGE_TAG }}

            - name: Build and push frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./frontend
                  push: true
                  tags: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
